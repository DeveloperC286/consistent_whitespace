stages:
  - clean-git-history-checking
  - conventional-commits-linting
  - formatting
  - linting
  - compiling
  - releasing


variables:
  SEMANTIC_VERSIONING_REGEX: "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"


clean-git-history-checking:
  stage: clean-git-history-checking
  image: rust
  before_script:
    - cargo install clean_git_history
  script:
    # Check all the commits in the branch.
    - /usr/local/cargo/bin/clean_git_history --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-linting:
  stage: conventional-commits-linting
  image: rust
  before_script:
    - cargo install conventional_commits_linter
  script:
    # Lint all the commits in the branch.
    - /usr/local/cargo/bin/conventional_commits_linter --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" --allow-angular-type-only
  rules:
    - if: $CI_MERGE_REQUEST_ID


formatting:
  stage: formatting
  image: rust
  before_script:
    - rustup component add rustfmt
  script:
    - cargo fmt --all -- --check --config=group_imports=StdExternalCrate
  rules:
    - if: $CI_MERGE_REQUEST_ID


linting:
  stage: linting
  image: rust
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy --verbose --workspace --all-targets -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --all-features -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --no-default-features -- -D warnings
  rules:
    - if: $CI_MERGE_REQUEST_ID


compiling:
  stage: compiling
  image: rust
  script:
    - cargo build --verbose --workspace
    - cargo build --verbose --workspace --all-features
    - cargo build --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


releasing:
  stage: releasing
  image: registry.gitlab.com/gitlab-org/release-cli
  before_script:
    - apk add git
  script:
    # If the tag already exist then exit.
    - new_tag=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" "Cargo.toml" | cut -d '"' -f 2)
    - git tag -l | grep -q "^${new_tag}$" && exit 0
    # Where to start generating the release description from.
    - base_commit=$(git rev-list --max-parents=0 HEAD)
    - latest_tag=$(git tag --sort=committerdate | tail -1)
    - description_from="${latest_tag:-${base_commit}}"
    # Generate the release description.
    - release_description=$(git log --format="* %s" ${description_from}.. --no-merges)
    # Create the new release.
    - release-cli create
      --name "${new_tag}"
      --description "${release_description}"
      --tag-name "${new_tag}"
      --ref "${CI_COMMIT_SHA}"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
